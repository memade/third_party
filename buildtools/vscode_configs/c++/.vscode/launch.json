{
    "configurations": [
        {
            "name": "(gdb) Launch", // 配置名称，将会在启动配置的下拉菜单中显示
            "type": "cppdbg", // 配置类型，对于C/C++可认为此处只能是cppdbg，由cpptools提供；不同编程语言不同
            "request": "launch", // 请求配置类型，可以为launch（启动）或attach（附加）
            "program": "${fileDirname}\\${fileBasenameNoExtension}.exe", // 将要进行调试的程序的路径
            "args": [], // 程序调试时传递给程序的命令行参数，一般设为空
            "stopAtEntry": false, // 设为true时程序将暂停在程序入口处，相当于在main上打断点
            "cwd": "${workspaceFolder}", // 调试程序时的工作目录，此为工作区文件夹；改成${fileDirname}可变为文件所在目录
            "environment": [], // 环境变量
            "externalConsole": true, //true 显示外置的控制台窗口，false 显示内置终端
            "MIMode": "gdb", // 指定连接的调试器
            "miDebuggerPath": "D:/__Github__/Win32/third_party/buildtools/toolchain/mingw64-llvm16.0.0/bin/gdb.exe", // 调试器路径，Windows下后缀不能省略
            "setupCommands": [
                { // 模板自带
                    "description": "为 gdb 启用整齐打印",
                    "text": "-enable-pretty-printing",
                    "ignoreFailures": true
                },
                { // 模板自带
                    "description": "将反汇编风格设置为 Intel",
                    "text": "-gdb-set disassembly-flavor intel",
                    "ignoreFailures": true
                }
            ],
            "preLaunchTask": "C/C++: clang++.exe 生成活动文件" // 调试前执行的任务，一般为编译程序。与tasks.json的label相对应
        }
    ],
    "version": "2.0.0"
}